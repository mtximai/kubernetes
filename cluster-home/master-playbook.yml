---
- hosts: master
  become: true
  tasks:
    - name: Ensure Br_Netfilter Module is Loaded
      modprobe:
        name: br_netfilter
        state: present

    - name: Ensure Overlay Module is Loaded
      modprobe:
        name: overlay
        state: present

    - name: Ensure Modules Loads Config File is Present
      copy:
        src: ./templates/modules-load.k8s.conf
        dest: /etc/modules-load.d/k8s.conf
        mode: 0644

    - name: Ensure Iptables See Bridged Traffic (1/3)
      sysctl:
        name: net.bridge.bridge-nf-call-ip6tables
        value: '1'
        sysctl_set: 'yes'
        state: present
        reload: 'yes'

    - name: Ensure Iptables See Bridged Traffic (2/3)
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: '1'
        sysctl_set: 'yes'
        state: present
        reload: 'yes'

    - name: Ensure Iptables See Bridged Traffic (3/3)
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: 'yes'
        state: present
        reload: 'yes'

    - name: Ensure OS Limits on MMap Counts for Elasticsearch
      sysctl:
        name: vm.max_map_count
        value: '262144'
        sysctl_set: 'yes'
        state: present
        reload: 'yes'

    - name: Ensure Net.Bridge Config File is Present
      copy:
        src: ./templates/sysctl.k8s.conf
        dest: /etc/sysctl.d/k8s.conf
        mode: 0644

    - name: Ensure Packages That Allow APT to be Used Over HTTPS are Presents
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: 'yes'
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release

    - name: Download APT Signing Key for Docker
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg --yes

    - name: Build Docker Repo Version String
      shell: echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      register: docker_apt_repo

    - name: Ensure APT Public Key for Docker Packages are Added
      apt_key:
        file: /usr/share/keyrings/docker-archive-keyring.gpg
        state: present

    - name: Ensure APT Public Key for Kubernetes are Added
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        keyring: /usr/share/keyrings/kubernetes-archive-keyring.gpg
        state: present

    - name: Ensure APT Repository for Docker in Source List are Present
      apt_repository:
        repo: '{{ docker_apt_repo.stdout }}'
        filename: docker
        state: present

    - name: Ensure APT Repository for Kubernetes in Source List are Present
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
        filename: kubernetes
        state: present

    - name: Ensure Container.d Runtime are Present
      apt:
        name: containerd.io
        state: present
        update_cache: 'yes'
      register: containerd_packages

    - name: Configure Container.d if config.toml file do not exist
      command: containerd config default | sudo tee /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Ensure Container.d Config File is Present
      copy:
        src: ./templates/containerd.config.toml
        dest: /etc/containerd/config.toml
        mode: 0644

    - name: Ensure Container.d Service Restarts
      systemd:
        state: restarted
        daemon_reload: 'yes'
        name: containerd
      when: containerd_packages.changed

    - name: Ensure Remove Swap File from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Ensure Swap is Disabled
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Ensure Kubernetes Pakages are Presents
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: 'yes'
      vars:
        packages:
          - kubelet
          - kubeadm
          - kubectl
      register: k8s_packages

    - name: Ensure Prevent Kubernetes Packages from Being Upgraded (1/3)
      dpkg_selections:
        name: kubelet
        selection: hold
      when: k8s_packages.changed

    - name: Ensure Prevent Kubernetes Packages from Being Upgraded (2/3)
      dpkg_selections:
        name: kubeadm
        selection: hold
      when: k8s_packages.changed

    - name: Ensure Prevent Kubernetes Packages from Being Upgraded (3/3)
      dpkg_selections:
        name: kubectl
        selection: hold
      when: k8s_packages.changed

    - name: Ensure Restart Kubelet Service
      systemd:
        state: restarted
        daemon_reload: 'yes'
        name: kubelet
      when: k8s_packages.changed

    - name: Check admin.conf file exists
      stat:
        path: /etc/kubernetes/admin.conf
      register: k8s_conf

    - name: Initialize the Kubernetes Cluster Using Kubeadm
      command: kubeadm init
      when: k8s_conf.stat.exists == false

    - name: Build Kubeconfig Path String
      become: no
      shell: echo "$HOME/.kube"
      register: kube_config_path

    - name: Build UserName String
      become: no
      shell: "getent passwd $(id -u) | cut -d: -f1"
      register: kube_config_user
    
    - name: Build GroupName String
      become: no
      shell: "getent group $(id -g) | cut -d: -f1"
      register: kube_config_group

    - name: Ensure Kubeconfig File exists (1/2)
      file:
        path: '{{ kube_config_path.stdout }}'
        state: directory

    - name: Ensure Kubeconfig File exists (2/2)
      copy:
        remote_src: 'yes'
        src: /etc/kubernetes/admin.conf
        dest: '{{ kube_config_path.stdout }}/config'
        owner: '{{ kube_config_user.stdout }}'
        group: '{{ kube_config_group.stdout }}'
        mode: '0644'

    # - name: Install Calico Pod Network
    #   become: false
    #   command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

    - name: Generate Join Command
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Ensure Join Command
      copy:
        content: "{{ join_command.stdout_lines[0] }}"
        dest: '{{ kube_config_path.stdout }}/join-command'
        mode: '0644'

    - name: Fetch Join Command File to Local
      fetch:
        dest: ./join-command
        src: '{{ kube_config_path.stdout }}/join-command'
        flat: 'yes'

    - name: Ensure Packages That Allow File Sharing with NFS Client are Installed
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: 'yes'
      vars:
        packages:
          - nfs-common
